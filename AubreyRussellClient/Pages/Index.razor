@using AubreyRussellClient.Repository
@using Entities.Models 
@page "/"
<h1>Aubrey Russell</h1>

<div class=".container-fluid text-center">
    @if (this.CurrentResume != null)
    {
        <div class="row">
            <div class="col">
                <div class="card card-body">
                    <ul class="borderless list-group">
                        <li class="list-group-item"><h3><b><u>Professional Experience</u></b></h3></li>
                        @foreach (ExperienceHistory profExperience in this.CurrentResume.ProfessionalExperienceHistories)
                        {
                            string endDate = profExperience.Current ? "Current" : profExperience.EndDate.Year.ToString();
                            <li class="list-group-item" style="margin-top: 10px; margin-right: auto; width: 100%;">
                                <div style="display: flex; width: auto;">
                                    <div style="font-size: 28px; color: #3465A4;">
                                        @profExperience.Employer.Name
                                    </div>
                                    <div style="font-size: 14px; color: #d3d3d3; margin-left: auto; margin-top: 12px;">
                                        @profExperience.StartDate.Year-@endDate
                                    </div>
                                </div>
                            </li>

                            @foreach (ContentItem profContent in profExperience.ExperienceItems.OrderBy(x => x.ExperienceItemContent))
                            {
                                <li class="list-group-item" style="margin-top: 10px; margin-right: auto;">
                                    <b>@profContent.ExperienceItemContent</b>
                                </li>
                                @foreach (ContentSubItem profSubContent in profContent.ExperienceSubItems)
                                {
                                    <li class="list-group-item">
                                        <div class="text-elem">
                                            - @((MarkupString)@profSubContent.SubItemContent)
                                        </div>
                                    </li>
                                }
                            }
                        }

                        <li class="list-group-item" style="margin-top: 10px;"><h3><b><u>Education</u></b></h3></li>
                        @foreach (ContentItem education in this.CurrentResume.EducationHistory.ExperienceItems)
                        {
                            <li class="list-group-item" style="margin-right: auto;">
                                <b>@education.ExperienceItemContent</b>
                            </li>
                            @foreach (ContentSubItem educationSubItem in education.ExperienceSubItems)
                            {
                                <li class="list-group-item">
                                    <div class="text-elem">
                                        - @((MarkupString)@educationSubItem.SubItemContent)
                                    </div>
                                </li>
                            }
                        }

                        <li class="list-group-item" style="margin-top: 10px;"><h3><b><u>Projects</u></b></h3></li>
                        @foreach (ContentItem project in this.CurrentResume.ProjectsHistory.ExperienceItems)
                        {
                            <li class="list-group-item" style="margin-right: auto;">
                                <b>@project.ExperienceItemContent</b>
                            </li>
                            @foreach (ContentSubItem projectSubItem in project.ExperienceSubItems)
                            {
                                <li class="list-group-item">
                                    <div class="text-elem">
                                        - @((MarkupString)@projectSubItem.SubItemContent)
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-body">
                    <ul class="borderless list-group">
                        <li class="list-group-item"><h3><b><u>Languages</u></b></h3></li>
                        @foreach (Language language in this.CurrentResume.Person.Languages)
                        {
                            <li class="list-group-item">@language.LanguageName</li>
                        }
                    </ul>

                    <ul class="borderless list-group" style="margin-top: 20px;">
                        <li class="list-group-item"><h3><b><u>Skills</u></b></h3></li>
                        @foreach (Skill skill in this.CurrentResume.Person.Skills)
                        {
                            <li class="list-group-item">@skill.SkillName</li>
                        }
                    </ul>

                    <ul class="borderless list-group" style="margin-top: 20px;">
                        <li class="list-group-item"><h3><b><u>Interests</u></b></h3></li>
                        @foreach (Interest interest in this.CurrentResume.Person.Interests)
                        {
                            <li class="list-group-item">@interest.InterestName</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container-fluid">
            <div>
                <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <h5>
                    Greetings! This website uses the free Microsoft Azure web hosting tier, which means the website doesn't stay continuously "warm".
                    This means the initial server API request after a period of inactivity usually takes about 30 seconds,
                    so thank you for your patience.
                </h5>
            </div>
        </div>
    }
</div>
<!-- /.container -->
<!-- /.container -->

@code {

    [Inject]
    public ResumeHttpRepository ResumeRepo { get; set; }

    public Resume CurrentResume { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.CurrentResume = await ResumeRepo.GetResumeContent();
            this.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}